#============================================================================
#
# WebGB::TrackData.pm
#
# The track configuration content loader for the WebGBrowse utility provides 
# the set of unique feature elements identified by WebGB::GFFData as an 
# array. It loads the WebGB::GlyphData and returns an array containing the 
# list of available glyph names. It can save and reload the track 
# configuration into an YAML file.
#
# Written by Ram Podicheti <mnrusimh@indiana.edu>
#
# $ID: TrackData.pm,v 0.01 2008/11/30 03:13:18 cgb Exp $
#
#============================================================================

package WebGB::TrackData;

use strict;
use warnings;
use WebGB::GlyphData;
use YAML;
use 5.008;
use Clone qw(clone);

our $VERSION = '0.01';
our @ISA = ();

#------------------------------------------------------------------------
# new($featureSetFile, $glyphLibraryFile, $trackConfigurationFile)
#
# Module constructor. It accepts three arguments.
# 1. $featureSetFile: a file generated by WebGB::GFFData containing the 
# 	list of all unique features from the uploaded GFF3 file.
# 2. $glyphLibraryFile: The base schema library for the available 
# 	glyphs.
# 3. $trackConfigurationFile: The file that stores the individual 
# 	track settings.
#
# It loads and presents an array of the unique features that need to be 
# configured. It provides the glyph library by creating a 
# WebGB::GlyphData object. And finally it stores and reloads the 
# individual track settings into a track configuration file.
# 
# Returns a reference to a newly created WebGB::TrackData object.
#------------------------------------------------------------------------

sub new {
	my ($class, $featureSetFile, $glyphLibraryFile, $trackConfigurationFile) = @_;
	my @featureList = YAML::LoadFile($featureSetFile);
	my $glyphData = WebGB::GlyphData->new($glyphLibraryFile);
	my @glyphList = $glyphData->getGlyphList;
	my %glyphLibrary = $glyphData->getGlyphLibrary;
	my %trackConfigurationData = YAML::LoadFile($trackConfigurationFile);

	my %tracks = ();
	foreach (keys %{$trackConfigurationData{'Tracks'}}) {
		$tracks{$_} = ${${$trackConfigurationData{'Tracks'}}{$_}}{'feature'};
	}

	
	my $self = {
		'FEATURE_LIST' => \@featureList,
		'GLYPH_LIBRARY' => \%glyphLibrary,
		'GLYPH_LIST' => \@glyphList,
		'TRACK_CONFIGURATION' => \%trackConfigurationData,
		'TRACKS' => \%tracks
	};
	bless $self, $class;
	return $self;
}

#------------------------------------------------------------------------
# configuredTrackCount
#
# This method returns the number of tracks that are configured.
#------------------------------------------------------------------------

sub configuredTrackCount {
	my $self = shift;
	my %trackConfigurationData = %{$self->{'TRACK_CONFIGURATION'}};
	return scalar keys %{$trackConfigurationData{'Tracks'}};
}


#------------------------------------------------------------------------
# addTrack($feature, $glyph)
# 
# This method adds a new configured track to the track configuration.
#------------------------------------------------------------------------

sub addTrack {
	my ($self, $featureName, $glyphName) = @_;
	my %trackConfigurationData = %{$self->{'TRACK_CONFIGURATION'}};
	my %glyphLibrary = %{$self->{'GLYPH_LIBRARY'}};
	my $baseNumber = $trackConfigurationData{'BaseNumber'};
	$trackConfigurationData{'EditMode'} = 'Add';
	$baseNumber++;
	$trackConfigurationData{'BaseNumber'} = $baseNumber;
	$trackConfigurationData{'ActiveTrack'} = "Track$baseNumber";
	my %newTrack = ();
	$newTrack{'feature'} = $featureName;
	$newTrack{'glyph'} = clone($glyphLibrary{$glyphName});
	${${${${$newTrack{'glyph'}}[0]}{'sub'}}[0]}{'VALUE'} = "Track$baseNumber";
	$trackConfigurationData{'Tracks'}{"Track$baseNumber"} = \%newTrack;
	$self->{'TRACK_CONFIGURATION'} = \%trackConfigurationData;
	return 1;
}


#------------------------------------------------------------------------
# editTrack($trackName)
#
# This method preps the editing of a specified track configuration.
#------------------------------------------------------------------------

sub editTrack {
	my ($self, $trackName) = @_;
	my %trackConfigurationData = %{$self->{'TRACK_CONFIGURATION'}};
	$trackConfigurationData{'EditMode'} = 'Edit';
	$trackConfigurationData{'ActiveTrack'} = $trackName;
	$self->{'TRACK_CONFIGURATION'} = \%trackConfigurationData;
	return 1;
}


#------------------------------------------------------------------------
# deleteTrack($trackName)
#
# This method deletes a specified track from the track configuration.
#------------------------------------------------------------------------

sub deleteTrack {
	my ($self, $trackName) = @_;
	my %trackConfigurationData = %{$self->{'TRACK_CONFIGURATION'}};
	delete $trackConfigurationData{'Tracks'}{$trackName};
	$self->{'TRACK_CONFIGURATION'} = \%trackConfigurationData;
	my %tracks = %{$self->{'TRACKS'}};
	delete $tracks{$trackName};
	$self->{'TRACKS'} = \%tracks;
	return 1;
}


#------------------------------------------------------------------------
# resetEditMode
#
# This method resets the editing mode of a track configuration.
#------------------------------------------------------------------------

sub resetEditMode {
	my $self = shift;
	my %trackConfigurationData = %{$self->{'TRACK_CONFIGURATION'}};
	$trackConfigurationData{'EditMode'} = '';
	$trackConfigurationData{'ActiveTrack'} = '';
	$self->{'TRACK_CONFIGURATION'} = \%trackConfigurationData;
	return 1;
}


#------------------------------------------------------------------------
# getFeatureList
#
# This method returns an array of the unique features obtained from the 
# uploaded GFF3 file that need to be configured.
#------------------------------------------------------------------------

sub getFeatureList {
	my $self = shift;
	return @{$self->{'FEATURE_LIST'}};
}


#------------------------------------------------------------------------
# getGlyphList
#
# This method returns an array of the glyph names obtained from glyph
# library.
#------------------------------------------------------------------------

sub getGlyphList { 
	my $self = shift; 
	return @{$self->{'GLYPH_LIST'}};
}


#------------------------------------------------------------------------
# getGlyphForm($glyphName)
#
# This method returns the hashref constituting the form to accept the 
# parameters for the specified glyph.
#------------------------------------------------------------------------

sub getGlyphForm {
	my ($self, $glyphName) = @_;
	my %glyphLibrary = %{$self->{'GLYPH_LIBRARY'}};
	return $glyphLibrary{$glyphName};
}

#------------------------------------------------------------------------
# getGlyphDescription($glyphName)
#
# This method returns the description of a requested glyph
#------------------------------------------------------------------------

sub getGlyphDescription {
	my ($self, $glyphName) = @_;
	return ${${${$self->{'GLYPH_LIBRARY'}}{$glyphName}}[0]}{'glyph_desc'};
}

#------------------------------------------------------------------------
# getTracks
#
# This method returns a hash of all the tracks that are added, with the 
# track names as keys and the feature name as value
#------------------------------------------------------------------------

sub getTracks {
	my $self = shift;
	my %tracks = %{$self->{'TRACKS'}};
	return %tracks;
}


#------------------------------------------------------------------------
# saveTrackConfigurationToFile($trackConfigurationOutputFile)
#
# This method serializes the configuration data to a YAML file under the 
# name supplied as the parameter $trackConfigurationOutputFile.
#
# Returns 1 if the file is created.
#------------------------------------------------------------------------

sub saveTrackConfigurationToFile {
	my ($self, $trackConfigurationFile) = @_;
	open OUTPUT, ">", $trackConfigurationFile;
        print OUTPUT YAML::Dump(%{$self->{'TRACK_CONFIGURATION'}});
	close OUTPUT;
	return 1;
}


#------------------------------------------------------------------------
# getTrackConfiguration
#
# This method returns an array containing the track configuration library.
#------------------------------------------------------------------------

sub getTrackConfiguration {
	my $self = shift;
	return %{$self->{'TRACK_CONFIGURATION'}};
}


1;
