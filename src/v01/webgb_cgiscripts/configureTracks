#!/usr/bin/perl

use warnings;
use strict;

use lib '../../lib';
use CGI qw(:standard);
use WebGB;
use WebGB::GeneralData;
use WebGB::TrackData;
use WebGB::ProfileData;

my $q = new CGI;
my ($timeStampDigest, $uploadDirectory, $uploadRoot) = ($q->url_param('tsd'), '', $WebGB::TMP);
if ($timeStampDigest eq '') {
	print $q->redirect(
		-location => '/'
	);
	exit(0);
}
$uploadDirectory = $uploadRoot . '/' . $timeStampDigest;
unless (-d $uploadDirectory) { 
	print $q-> redirect( 
		-location => '/'
	); 
	exit(0); 
}

my $yamlib = $WebGB::YAML_LIB;
my ($inputProfileFile, $featureSetFile, $generalSettingsFile, $trackConfigurationFile, $glyphLibraryFile) = ('inputProfile.yml', 'featureSet.yml', 'generalSettings.yml', 'trackConfiguration.yml', 'glyphLibrary.yml');
my $generalData = WebGB::GeneralData->new("$uploadDirectory/$generalSettingsFile");
my $trackData = WebGB::TrackData->new("$uploadDirectory/$featureSetFile", "$yamlib/$glyphLibraryFile", "$uploadDirectory/$trackConfigurationFile");
my $profileData = WebGB::ProfileData->new("$uploadDirectory/$inputProfileFile");
my $emailAddress = $profileData->getEMailAddress;
my $isPostBack = 0;

my $errDescriptionCtrlHolderClass = '';
my $errFeatureCtrlHolderClass = '';
my $errTrackCtrlHolderClass = '';
my $errCtrlHolderClassValue = ' error';

my $errDescriptionMsg = '';
my $errFeatureMsg = '';
my $errTrackMsg = '';
my $errMsgValue = qq(<p id="error1" class="errorField"><strong>value missing!</strong></p>\n);

my $addLabel = 'Add Track';
my $editLabel = 'Edit Track';
my $deleteLabel = 'Delete Track';
my $doneLabel = 'Display in GBrowse';
my $saveLabel = 'Save Progress';

if ($ENV{REQUEST_METHOD} eq 'POST') { 
	my ($referer, $url) = ($ENV{HTTP_REFERER}, $ENV{SERVER_NAME} . $ENV{SCRIPT_NAME}); 
	$isPostBack = 1 if ($referer =~ /$url/); 
}

my ($paramDescription, $paramFeature, $paramGlyph, $paramTrack, $paramPostBackCommand) = ('txtDescription', 'lstFeature', 'lstGlyph', 'lstTrack', 'cmdSubmit');
my ($description, $feature, $glyph, $track) = ($generalData->getDescription, '', 'generic', '');

if ($isPostBack) {
	$description = $q->param($paramDescription);
	$feature = $q->param($paramFeature);
	$glyph = $q->param($paramGlyph);
	$track = $q->param($paramTrack);
	my $postBackCommand = $q->param($paramPostBackCommand);
	unless ($description) {
		$errDescriptionCtrlHolderClass = $errCtrlHolderClassValue;
		$errDescriptionMsg = $errMsgValue;
	} else {
		if ($postBackCommand eq $saveLabel) {
			my $sendmail = $WebGB::SEND_MAIL . ' -t';
			my $from = "From: webgbrowse\@cgb.indiana.edu\n";
			my $reply_to = "Reply-to: biohelp\@cgb.indiana.edu\n";
			my $subject  = "Subject: [WebGBrowse] Progress Saved - $description \n";
			my $content  = qq(
Dear WebGBrowse user,
	You opted to save progress while configuring your dataset ($description) and below is the link to your configuration in progress. Any changes you might have made after saving the progress will be automatically committed. You can continue configuring your dataset by copying and pasting the following URL in your browser.
	http://$ENV{SERVER_NAME}/cgi-bin/configureTracks?tsd=$timeStampDigest

If you have any questions or suggestions, please contact biohelp\@cgb.indiana.edu. Thanks for using WebGBrowse.

WebGBrowse Development Team
Center for Genomics and Bioinformatics
Indiana University
	);
			my $send_to  = "To: $emailAddress\n";

			open(SENDMAIL, "|$sendmail") or die "Cannot open $sendmail: $!";
			print SENDMAIL $from;
			print SENDMAIL $reply_to;
			print SENDMAIL $subject;
			print SENDMAIL $send_to;
			print SENDMAIL "Content-type: text/plain\n\n";
			print SENDMAIL $content;
			close(SENDMAIL);
			print $q->redirect(
				-location => "/cgi-bin/webgbrowse/progressSaved?tsd=$timeStampDigest"
			);
			exit 0;
		} elsif ($postBackCommand eq $addLabel) {
			unless ($feature) {
				$errFeatureCtrlHolderClass = $errCtrlHolderClassValue;
				$errFeatureMsg = $errMsgValue;
			} else {
				$generalData->setDescription($description);
				$generalData->saveGeneralSettingsToFile("$uploadDirectory/$generalSettingsFile");
				$trackData->addTrack($feature, $glyph);
				$trackData->saveTrackConfigurationToFile("$uploadDirectory/$trackConfigurationFile");
				print $q->redirect(
					-location => "/cgi-bin/webgbrowse/configureGlyph?tsd=$timeStampDigest"
				);
				exit 0;
			}
		} elsif ($postBackCommand eq $editLabel) {
			unless ($track) {
				$errTrackCtrlHolderClass = $errCtrlHolderClassValue;
				$errTrackMsg = $errMsgValue;
			} else {
				$generalData->setDescription($description);
				$generalData->saveGeneralSettingsToFile("$uploadDirectory/$generalSettingsFile");
				$trackData->editTrack($track);
				$trackData->saveTrackConfigurationToFile("$uploadDirectory/$trackConfigurationFile");
				print $q->redirect(
					-location => "/cgi-bin/webgbrowse/configureGlyph?tsd=$timeStampDigest"
				);
				exit(0);
			}
		} elsif ($postBackCommand eq $deleteLabel) {
			unless ($track) {
				$errTrackCtrlHolderClass = $errCtrlHolderClassValue;
				$errTrackMsg = $errMsgValue;
			} else {
				$generalData->setDescription($description);
				$generalData->saveGeneralSettingsToFile("$uploadDirectory/$generalSettingsFile");
				$trackData->deleteTrack($track);
				$trackData->saveTrackConfigurationToFile("$uploadDirectory/$trackConfigurationFile");
			}
		} elsif ($postBackCommand =~ /$doneLabel/) {
			foreach (@WebGB::GBR_VER) {
				if ($postBackCommand eq "$doneLabel $_") {
					$_ = '' if ($_ eq '1.70');
					print $q->redirect(
						-location => "/cgi-bin/webgbrowse/generateConfigurationData$_?tsd=$timeStampDigest"
					);
					exit(0);
				}
			}
		}
	}
}

my @features = $trackData->getFeatureList;
my @glyphs = $trackData->getGlyphList;
my %tracks = $trackData->getTracks;
my %trackConfigurationData = $trackData->getTrackConfiguration;

my $featureList = '';
foreach (@features) {
	$featureList .= qq(<option value="$_");
	$featureList .= qq( selected="yes") if ($feature && ($_ eq $feature));
	$featureList .= qq(> $_ </option>\n\t\t\t\t\t);
}

my $content = '';
$content .= qq(
	<script language="javascript">
	var glyphDescription = new Array();
);

my $glyphList = '';
foreach (@glyphs) {
	$content .= qq(glyphDescription['$_'] = ') . $trackData->getGlyphDescription($_) . qq(';\n);

	$glyphList .= qq(<option value="$_");
	$glyphList .= qq( selected="yes") if ($_ eq $glyph);
	$glyphList .= qq(> $_ </option>\n\t\t\t\t\t);
}

my $trackList = '';
foreach (sort keys %tracks) {
	$trackList .= qq(<option value="$_");
	$trackList .= qq( selected="yes") if ($_ eq $track);
	$trackList .= qq(> $tracks{$_} </option>\n\t\t\t\t\t);
}
my $configuredTrackCount = $trackData->configuredTrackCount;

if ($configuredTrackCount > 0) {
	$content .= qq(
		var trackConfiguration = new Array();
	);
	foreach (keys %{$trackConfigurationData{'Tracks'}}) {
		my %curTrack = %{${$trackConfigurationData{'Tracks'}}{$_}};
		$content .= qq(trackConfiguration['$_'] = 'Track Configuration for \\"$curTrack{'feature'}\\" \\n\\n);
		$content .= qq(Glyph: ${${$curTrack{'glyph'}}[0]}{'glyph'} \\n);
		foreach (@{$curTrack{'glyph'}}) {
			foreach (@{${$_}{'sub'}}) {
				my $ignoreIfNull = '';
				$ignoreIfNull = ${$_}{'IGNORE_IF_NULL'} if (${$_}{'IGNORE_IF_NULL'});
				if ($ignoreIfNull eq '1') {
					next if (${$_}{'VALUE'} eq '');
				}
				$content .= qq(${$_}{'CONF_TAG'}: );
				my $template = '';
				$template = ${$_}{'templ'} if (${$_}{'templ'});
				if ($template eq 'check') {
					if (${$_}{'VALUE'}) {
						if (${$_}{'VALUE'} eq (${$_}{'NAME'}) . '1') {
							$content .= qq(1 \\n);
						} else {
							$content .= qq(0 \\n);
						}
					} else {
						$content .= qq(0 \\n);
					}
				} else {
					$content .= qq(${$_}{'VALUE'} \\n);
				}
			}
		}
		$content .= qq(';\n);
	}
}

$content .= qq(
	</script>
);

$content .= qq( 
	<form class="uniForm inlineLabels" method="post" name="configureTracksAddForm"> 
);
unless ($emailAddress eq '') {
	$content .= qq(
		<p align="right">
			<input type="submit" class="submitButton" name="$paramPostBackCommand" value="$saveLabel" />
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</p>
	);
} else {
	$content .= "<br>";
}
$content .= qq(
		<fieldset class="inlineLabels">
			<legend>Describe your dataset</legend>
			<div class="ctrlHolder$errDescriptionCtrlHolderClass">
				<label>Description *</label>$errDescriptionMsg
				<p class="intro">Please provide a short description of your data set.</p>
				<input type="text" name="$paramDescription" size="60" value="$description" />
				<p class="formHint">Description of the database</p>
			</div>
		</fieldset>

		<fieldset class="inlineLabels"> 
			<legend>Add New Track</legend> 
			<div class="ctrlHolder$errFeatureCtrlHolderClass"> 
				$errFeatureMsg
				<p class="intro">Please select a feature from the list on the left and a glyph from the drop down menu on the right, then click  the button <input type="button" class="demoButton" value="$addLabel" /> to add a new track for display. Upon selection, a brief description and a sample image for the corresponding glyph will be shown.</p>
				<table border="0" width="100%">
					<tr>
						<td width="25%" valign="top">
							<label class="complex">Feature * </label>
							<select name="$paramFeature" size="10" class="complex">
								$featureList
							</select>
						</td>
						<td width="25%" valign="top">
							<label class="complex">Glyph &nbsp; &nbsp; &nbsp; (<a href="/glyphdoc.html" target="_blank">What is a glyph?</a>)</label> 
							<select name="$paramGlyph" size="1" onChange="txtGlyphDescription.value = glyphDescription[$paramGlyph.value];imgGlyph.src='/webgbrowse/include/img/glyphs/' + $paramGlyph.value + '.jpg';" class="complex">
								$glyphList
							</select>
							<br><br>
							<textarea rows="5" cols="80" readonly="yes" name="txtGlyphDescription" class="subComplex">) . $trackData->getGlyphDescription($glyph) . qq(</textarea>
						</td>
						<td width="50%" valign="middle">
							<img src="/webgbrowse/include/img/glyphs/$glyph.jpg" name="imgGlyph" />
						</td>
					</tr>
				</table>
				<!--
				<p class="formHint">Select a feature you want to configure and a glyph to apply to the selected feature</p> 
				-->
			</div>
			<div class="buttonPanel">
				<input type="submit" class="submitButton" name="$paramPostBackCommand" value="$addLabel" /> 
			</div>
		</fieldset>
);

if ($configuredTrackCount > 0) {
	$content .= qq(
		<fieldset class="inlineLabels">
			<legend>Tracks Added</legend>
			<div class="ctrlHolder$errTrackCtrlHolderClass">
				$errTrackMsg
				<p class="intro">Select a track from the list on the left and you will see the configuration settings for that feature in the box on the right. Click on <input type="button" class="demoButton" value="$editLabel" /> to edit the configuration settings of the selected track. In case you want to delete the selected track, click <input type="button" class="demoButton" value="$deleteLabel" />. Once you are done adding tracks, you can proceed to the actual GBrowse display in the version of your choice by clicking on <input type="button" class="demoButton" value="$doneLabel x.x" />. You will be allowed to come back and make further changes if desired.</p>
				<table border="0" width="100%">
					<tr>
						<td width="40%" valign="top">
							<label class="complex">Configured Tracks * </label>
							<select name="$paramTrack" size="10" onChange="txtTrackDetails.value = trackConfiguration[$paramTrack.value]" class="complex">
								$trackList
							</select>
						</td>
						<td width="60%" valign="top">
							<label class="complex">Configuration Settings </label>
							<textarea rows="10" cols="80" readonly="yes" name="txtTrackDetails" class="complex"></textarea>
						</td>
					</tr>
				</table>
				<!--
				<p class="formHint">The list of all the tracks added</p>
				-->
			</div>
			<div class="buttonPanel">
				<input type="submit" class="submitButton" name="$paramPostBackCommand" value="$editLabel" />
				&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
				<input type="submit" class="submitButton" name="$paramPostBackCommand" value="$deleteLabel" />
				&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
	);
	foreach (@WebGB::GBR_VER) {
		$content .= qq(
				<input type="submit" class="submitButton" name="$paramPostBackCommand" value="$doneLabel $_" />
		);
	}
	$content .= qq(
			</div>
		</fieldset>
	);
}
$content .= qq(
	</form>
);

print getStartHtml($q); 
print getContent($content);
print $q->end_html();

