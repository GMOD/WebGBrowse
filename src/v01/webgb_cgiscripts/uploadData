#!/usr/bin/perl

use warnings;
use strict;

use lib '../lib';
use CGI qw(:standard);
use CGI::Session;
use WebGB;
use WebGB::GFFData;
use WebGB::Config2TrackData;
use WebGB::ProfileData;
use Digest::MD5  qw(md5_hex);
use Archive::Extract;
use File::Copy;
use File::Basename;
use File::Path;

my $q = new CGI;

my $isPostBack = 0;

if ($ENV{REQUEST_METHOD} eq 'POST') {
	my ($referer, $url) = ($ENV{HTTP_REFERER}, $ENV{SERVER_NAME} . $ENV{SCRIPT_NAME});
	$url = $ENV{SERVER_NAME} . ':' . $ENV{SERVER_PORT} . $ENV{SCRIPT_NAME} if ($ENV{SERVER_PORT} && ($ENV{SERVER_PORT} ne '80'));
	$referer = '' unless ($referer);
	$isPostBack = 1 if ($referer =~ /$url/);
}

my $errGFFInputFileCtrlHolderClass = '';
my $errConfigFileCtrlHolderClass = '';
my $errEMailAddressCtrlHolderClass = '';
my $errCtrlHolderClassValue = ' error';

my $errGFFInputFileMsg = '';
my $errConfigFileMsg = '';
my $errEMailAddressMsg = '';
my $errGFFInputFileMsgValue = qq(<p id="error1" class="errorField"><strong>Please enter a valid GFF3 file.</strong></p>\n);
my $errConfigFileMsgValue = qq(<p id="error3" class="errorField"><strong>Invalid configuration file type. GBrowse configuration file names should end with an extension ".conf".</strong></p>\n);
my $errEMailAddressMsgValue = qq(<p id="error2" class="errorField"><strong>Invalid email address!</strong></p>\n);

my ($validGFFInputFile, $validConfigFile, $validEMailAddress) = (1, 1, 1);

my ($paramGFFInputFile, $paramConfigFile, $paramEMailAddress) = ('fileGFFInput', 'fileConfig', 'txtEMailAddress');

my ($gffInputFile, $configFile, $emailAddress) = ('', '', '');

if ($isPostBack) {
	$gffInputFile = $q->param($paramGFFInputFile);
	$configFile = $q->param($paramConfigFile);
	$emailAddress = $q->param($paramEMailAddress);
	unless ($gffInputFile) {
		$errGFFInputFileCtrlHolderClass = $errCtrlHolderClassValue;
		$errGFFInputFileMsg = $errGFFInputFileMsgValue;
		$validGFFInputFile = 0;
	}

	if ($configFile) {
		my @configFileParseResults = fileparse($configFile, '\.\w*');
		unless ($configFileParseResults[2] eq '.conf') {
			$errConfigFileCtrlHolderClass = $errCtrlHolderClassValue;
			$errConfigFileMsg = $errConfigFileMsgValue;
			$validConfigFile = 0;
		}
	}

	if ($emailAddress) {
		unless (isValidEMail($emailAddress)) {
			$errEMailAddressCtrlHolderClass = $errCtrlHolderClassValue;
			$errEMailAddressMsg = $errEMailAddressMsgValue;
			$validEMailAddress = 0;
		}
	}
	if ($validGFFInputFile && $validConfigFile && $validEMailAddress) {
		my $session = new CGI::Session();
		unless ($session) {
			print logError($q, CGI::Session->errstr, 1);
			exit(1);
		}
		my $sessionCookie = $q->cookie(
			-name => $session->name,
			-value => $session->id
		);

		my ($timeStampDigest, $uploadDirectory, $uploadRoot) = ('', '', $WebGB::TMP);
		$timeStampDigest = md5_hex($session->id . (`date +"%Y%m%d_%H%M%S"`));
		$uploadDirectory = $uploadRoot . '/' . $timeStampDigest;
		unless (mkdir $uploadDirectory, 0755) {
			print logError($q, $!, 2);
			exit(1);
		}
		my $yamlib = $WebGB::YAML_LIB;
		my ($inputProfileFile, $featureSetFile, $generalSettingsFile, $trackConfigurationFile, $glyphLibraryFile) = ('inputProfile.yml', 'featureSet.yml', 'generalSettings.yml', 'trackConfiguration.yml', 'glyphLibrary.yml');
		my ($gffName, $gffPath, $gffExtension) = fileparse($gffInputFile, '\.\w*');
		my @parts = split(/\\/, $gffName);
		$gffName = pop(@parts);
		$gffInputFile = $gffName . $gffExtension;
		$gffInputFile =~ tr/ /_/;
		my $gffInputFileHandle = $q->upload($paramGFFInputFile);
		my @archiveExtensions = ('.gz', '.zip');
		if (grep(/^$gffExtension$/, @archiveExtensions)) {
			my $uploadArchiveDirectory = $uploadDirectory . "_arch";
			unless (mkdir $uploadArchiveDirectory, 0755) {
				print logError($q, $!, 2);
				exit(1);
			}
                        if (open (UPLOADFILE, '>', "$uploadArchiveDirectory/$gffInputFile")) {
                                while (<$gffInputFileHandle>) {
                                        print UPLOADFILE $_;
                                }
                                close UPLOADFILE;
                        } else {
                                print logError($q, $!, 3);
				rmtree($uploadArchiveDirectory);
                                exit(1);
                        }

			my $archiveExtractor = Archive::Extract->new(archive => "$uploadArchiveDirectory/$gffInputFile");
			my $extracted = $archiveExtractor->extract(to => $uploadArchiveDirectory);
			if ($extracted) {
				my $files = $archiveExtractor->files;
				if ((scalar @{$files}) == 1) {
					unless ($files->[0] =~ /\/$/) {
						$gffInputFile = $files->[0];
						copy("$uploadArchiveDirectory/$gffInputFile", "$uploadDirectory/$gffInputFile");
					} else {
						$errGFFInputFileCtrlHolderClass = $errCtrlHolderClassValue;
						$errGFFInputFileMsg = qq(<p id="error1" class="errorField"><strong>WebGBrowse accepts archives containing a single gff3 file and no subdirectories. $gffInputFile is unacceptable. </strong></p>\n);
						$validGFFInputFile = 0;
						rmtree($uploadArchiveDirectory);
					}
				} else {
					$errGFFInputFileCtrlHolderClass = $errCtrlHolderClassValue;
					$errGFFInputFileMsg = qq(<p id="error1" class="errorField"><strong>WebGBrowse accepts archives containing a single gff3 file and no subdirectories. $gffInputFile is unacceptable. </strong></p>\n);
					$validGFFInputFile = 0;
					rmtree($uploadArchiveDirectory);
				}
			} else {
				$errGFFInputFileCtrlHolderClass = $errCtrlHolderClassValue;
				$errGFFInputFileMsg = qq(<p id="error1" class="errorField"><strong>Unrecognized file format: $gffInputFile might be corrupt</strong></p>\n);
				$validGFFInputFile = 0;
				rmtree($uploadArchiveDirectory);
			}
		} else {
			if (open (UPLOADFILE, '>', "$uploadDirectory/$gffInputFile")) {
				while (<$gffInputFileHandle>) {
					print UPLOADFILE $_;
				}
				close UPLOADFILE;
			} else {
				print logError($q, $!, 3);
				rmtree($uploadDirectory);
				exit(1);
			}
		}

		my ($gffData, $profileData, $exception);
		if ($validGFFInputFile) {
			eval {
				$gffData = WebGB::GFFData->new("$uploadDirectory/$gffInputFile", "$uploadDirectory/$featureSetFile");
			};
			if ($exception = Exception::Class->caught('WebGB::Exceptions::WebGBException::GFFDataException::InvalidParameterException')) {
				$errGFFInputFileCtrlHolderClass = $errCtrlHolderClassValue;
				$errGFFInputFileMsg = qq(<p id="error1" class="errorField"><strong>) . $exception->error . qq(</strong></p>\n);
				$validGFFInputFile = 0;
				rmtree($uploadDirectory);
				#print logError($q, $exception->error, 4);
				#exit(1);
			} elsif ($exception = Exception::Class->caught('WebGB::Exceptions::WebGBException::GFFDataException::InvalidGFFLineException')) {
				$errGFFInputFileCtrlHolderClass = $errCtrlHolderClassValue;
				$errGFFInputFileMsg = qq(<p id="error1" class="errorField"><strong>) . $exception->error . qq(</strong></p>\n);
				$validGFFInputFile = 0;
				rmtree($uploadDirectory);
				#print logError($q, $exception->error, 5);
				#exit(1);
			} elsif ($exception = Exception::Class->caught('WebGB::Exceptions::WebGBException')) {
				print logError($q, $exception->error, 6);
				exit(1);
			}
		}

		if ($configFile) {
			my ($configName, $configPath, $configExtension) = fileparse($configFile, '\.\w*');
			my @parts = split(/\\/, $configName);
			$configName = pop(@parts);
			$configFile = $configName . $configExtension;
			$configFile =~ tr/ /_/;
			my $configFileHandle = $q->upload($paramConfigFile);
			if (open (UPLOADFILE, '>', "$uploadDirectory/$configFile")) {
				while (<$configFileHandle>) {
					print UPLOADFILE $_;
				}
				close UPLOADFILE;
			} else {
				print logError($q, $!, 7);
				rmtree($uploadDirectory);
				exit(1);
			}
		}

		if ($validGFFInputFile) {
			copy("$yamlib/$inputProfileFile", "$uploadDirectory/$inputProfileFile");
			copy("$yamlib/$generalSettingsFile", "$uploadDirectory/$generalSettingsFile");
			if ($gffData->getSequenceAvbl) {
				my $generalData = WebGB::GeneralData->new("$uploadDirectory/$generalSettingsFile");
				$generalData->addFastaDumper;
				$generalData->saveGeneralSettingsToFile("$uploadDirectory/$generalSettingsFile");
			}
			copy("$yamlib/$trackConfigurationFile", "$uploadDirectory/$trackConfigurationFile");

			if ($configFile) {
				eval {
					my $configData = WebGB::Config2TrackData->new("$uploadDirectory/$generalSettingsFile", "$uploadDirectory/$featureSetFile", "$yamlib/$glyphLibraryFile", "$uploadDirectory/$trackConfigurationFile", "$uploadDirectory/$configFile");
				};
				if ($exception = Exception::Class->caught('WebGB::Exceptions::WebGBException::ConfigException::InvalidParameterException')) {
					#$errConfigFileCtrlHolderClass = $errCtrlHolderClassValue; 
					#$errConfigFileMsg = qq(<p id="error1" class="errorField"><strong>) . $exception->error . qq(</strong></p>\n); 
					rmtree($uploadDirectory); 
					print logError($q, $exception->error, 7);
					exit(1);
				} elsif ($exception = Exception::Class->caught('WebGB::Exceptions::WebGBException::ConfigException::InvalidTrackLineException')) {
					$errConfigFileCtrlHolderClass = $errCtrlHolderClassValue; 
					$errConfigFileMsg = qq(<p id="error1" class="errorField"><strong>) . $exception->error . qq(</strong></p>\n); 
					$validConfigFile = 0;
					rmtree($uploadDirectory);
					#print logError($q, $exception->error, 8);
					#exit(1); 
				} elsif ($exception = Exception::Class->caught('WebGB::Exceptions::WebGBException')) {
					print logError($q, $exception->error, 6);
					exit(1);
				}
			}
		}
		if ($validGFFInputFile && $validConfigFile && $validEMailAddress) {	
			$profileData = WebGB::ProfileData->new("$uploadDirectory/$inputProfileFile");
			$profileData->setEMailAddress($emailAddress);
			$profileData->setDBEntryStatus(0);
			$profileData->setGFFFileName($gffInputFile);
			$profileData->setSeqID($gffData->{'SEQ_ID'});
			$profileData->saveInputProfileToFile("$uploadDirectory/$inputProfileFile");
	
			 print $q->redirect(
				-location => "/cgi-bin/configureTracks?tsd=$timeStampDigest",
				-cookie => $sessionCookie
			);
			exit(0);
		}
	}
}
print getStartHtml($q);
my $pageContent = '';
unless ($isPostBack) {
	$pageContent = qq(
		<p>
		<br>
			<b>WebGBrowse - A Web Server for GBrowse</b>
		</p>
		<p align="justify">
			The Generic Genome Browser (<a href="http://gmod.org/wiki/Gbrowse" target="_blank">GBrowse</a>) is one of the most widely used visualization tool for displaying genomic features along a reference sequence. However, the installation and configuration of GBrowse can be tedious for many biologists who are not computer savvy or lack adequate computational resources. <a href="/about.html">WebGBrowse</a> allows users to upload their genomic data and choose to display the features from a large variety of styles.
		</p>

		<p>
			We recommend you to go through our <a href="/tutorial.html">tutorial</a> before starting to use WebGBrowse.
		</p>
	);
}

$pageContent .= qq(
		<form class="uniForm inlineLabels" method="post" name="uploadDataForm" enctype="multipart/form-data">
			<fieldset class="inlineLabels">
				<legend>WebGBrowse Input</legend>
				<div class="ctrlHolder$errGFFInputFileCtrlHolderClass">
					<p class="intro">
						WebGBrowse is designed for configuring GFF3 format annotation files only. For more details on the GFF3 format <a href="http://www.sequenceontology.org/gff3.shtml" target="_blank">click here</a>. The input can be either a text file or a .zip or .gz file. While using .zip or .gz, make sure that there is only the gff3 file inside and no sub-directories.
					</p>
					<label>GFF3 File * </label>$errGFFInputFileMsg
					<input type="file" name="$paramGFFInputFile" size="48" class="fileUpload" />
					<p class="formHint">Upload GFF3 data file [<a href="/cgi-bin/downloadSample">Sample GFF3 file</a>]</p>
				</div>
				<div class="ctrlHolder$errConfigFileCtrlHolderClass">
					<p class="intro">
						WebGBrowse can apply a pre-existing configuration file (generated from WebGBrowse) to your dataset. If you have a configuration file that you wish to begin with instead of starting from scratch, please upload it here. GBrowse configuration files have ".conf" as their file extension.<br>
						<b>Warning: For accurate results, please ensure that the configuration file you are uploading is originally generated using WebGBrowse.</b>
					</p>
					<label>Configuration File to be used as a template</label>$errConfigFileMsg
					<input type="file" name="$paramConfigFile" size="48" class="fileUpload" />
					<p class="formHint">Upload a configuration file (optional) [<a href="/cgi-bin/downloadSampleConf">Sample Conf file</a>]</p>
				</div>
				<div class="ctrlHolder$errEMailAddressCtrlHolderClass">
					<p class="intro">
						Enter your email address if you would like WebGBrowse to send and track your results.
					</p>
					<label>Email address</label>$errEMailAddressMsg
					<input type="text" name="$paramEMailAddress" size="60" value="$emailAddress" class="textInput" />
					<p class="formHint">Enter your email address (optional)</p>
				</div>
				<div class="buttonPanel">
					<input type="reset" class="resetButton" name="cmdReset" value="Reset" />
					&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
					<input type="submit" class="submitButton" name="cmdSubmit" value="Submit" />
				</div>
			</fieldset>
		</form>
);
print getContent($pageContent);
print $q->end_html();

